[{"D:\\sites\\pokedex\\src\\reportWebVitals.js":"1","D:\\sites\\pokedex\\src\\App.js":"2","D:\\sites\\pokedex\\src\\index.js":"3","D:\\sites\\pokedex\\src\\components\\Pokedex.js":"4","D:\\sites\\pokedex\\src\\components\\Pokemon.js":"5","D:\\sites\\pokedex\\src\\mockData.js":"6","D:\\sites\\pokedex\\src\\constants.js":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":450,"mtime":1606745229251,"results":"10","hashOfConfig":"9"},{"size":657,"mtime":1606743370223,"results":"11","hashOfConfig":"9"},{"size":3304,"mtime":1606750006803,"results":"12","hashOfConfig":"9"},{"size":2432,"mtime":1606748955843,"results":"13","hashOfConfig":"9"},{"size":4195,"mtime":1606743197357,"results":"14","hashOfConfig":"9"},{"size":96,"mtime":1606747122212,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f201wj",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\sites\\pokedex\\src\\reportWebVitals.js",[],"D:\\sites\\pokedex\\src\\App.js",[],"D:\\sites\\pokedex\\src\\index.js",[],"D:\\sites\\pokedex\\src\\components\\Pokedex.js",[],"D:\\sites\\pokedex\\src\\components\\Pokemon.js",["31","32"],"import React, { useEffect, useState } from \"react\";\r\nimport { Typography, Link, CircularProgress, Button } from \"@material-ui/core\";\r\nimport { toFirstCharUppercase } from \"../constants\";\r\nimport axios from \"axios\";\r\n\r\nconst Pokemon = (props) => {\r\n  const { match, history } = props;\r\n  const { params } = match;\r\n  const { pokemonId } = params;\r\n  const [pokemon, setPokemon] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        setPokemon(data);\r\n      })\r\n      .catch(function (error) {\r\n        setPokemon(false);\r\n      });\r\n  }, [pokemonId]);\r\n\r\n  /*1. pokemond=undefined, taht means we're getting the info\r\n    -> return loading progress\r\n    2. pokemon=good data, that means we've gotten the info\r\n    -> return actual info\r\n    3. pokemon=bad data / false \r\n    -> return pokemon not found\r\n  */\r\n\r\n  const generatePokemonJSX = () => {\r\n    const { name, id, species, height, weight, types, sprites } = pokemon;\r\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\r\n    const { front_default } = sprites;\r\n\r\n    return (\r\n      <>\r\n        <Typography variant=\"h2\">\r\n          {`${id}.`} {toFirstCharUppercase(name)}\r\n          <img src={front_default} />\r\n        </Typography>\r\n        <img style={{ width: \"300px\", height: \"300px\" }} src={fullImageUrl} />\r\n        <Typography variant=\"h3\">Pokemon info</Typography>\r\n        <Typography>\r\n          {\"Species: \"}\r\n          <Link href={species.url}>{species.name}</Link>\r\n        </Typography>\r\n        <Typography>Height: {height}</Typography>\r\n        <Typography>Weight: {weight}</Typography>\r\n        <Typography variant=\"h6\">Types:</Typography>\r\n        {types.map((typeInfo) => {\r\n          const { type } = typeInfo;\r\n          const { name } = type;\r\n          return <Typography key={name}> {`${name}`}</Typography>;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {pokemon === undefined && <CircularProgress />}\r\n      {pokemon !== undefined && pokemon && generatePokemonJSX()}\r\n      {pokemon === false && <Typography> Pokemon not found</Typography>}\r\n      {pokemon !== undefined && (\r\n        <Button variant=\"contained\" onClick={() => history.push(\"/\")}>\r\n          Back to pokedex\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pokemon;\r\n","D:\\sites\\pokedex\\src\\mockData.js",["33"],"D:\\sites\\pokedex\\src\\constants.js",[],{"ruleId":"34","severity":1,"message":"35","line":41,"column":11,"nodeType":"36","endLine":41,"endColumn":38},{"ruleId":"34","severity":1,"message":"35","line":43,"column":9,"nodeType":"36","endLine":43,"endColumn":79},{"ruleId":"37","severity":1,"message":"38","line":1,"column":1,"nodeType":"39","endLine":148,"endColumn":3},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]